{"version":3,"sources":["components/env.js","components/authComponent.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","envData","isLoggedIn","env","require","requireAuth","Component","AuthenticatedComponent","_React$Component","Object","inherits","_super","createSuper","props","classCallCheck","this","call","createClass","key","value","checkAuth","location","pathname","search","history","push","react_default","a","createElement","React","withRouter","Home","lazy","Promise","all","e","then","bind","Header","Footer","Form","registerForm","Param","Card","Dynamic","Formtwo","VariableRenderHtml","LazyLoad","Greeting","Layout","App","react_router_dom","react","fallback","react_router","path","component","exact","name","render","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","App_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6c51a6ea.chunk.js","sourcesContent":["export const envData ={\n    isLoggedIn : true\n}","import React from 'react';\nimport { withRouter } from 'react-router';\nconst env = require('./env')\n\n// import * as Cookie from \"js-cookie\";\nexport default function requireAuth(Component) {\n  class AuthenticatedComponent extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n    componentDidMount() {\n      this.checkAuth();\n    }\n    checkAuth() {\n      const location = this.props.location;\n      const redirect = location.pathname + location.search;\n      if (!env.envData.isLoggedIn) {\n        // this.props.history.push(`?redirect=${redirect}`);\n        this.props.history.push(`/`);\n      }\n    }\n    render() {\n      return env.envData.isLoggedIn\n        ? <Component {...this.props} />\n        : null;\n    }\n  }\n  return withRouter(AuthenticatedComponent)\n}","\nimport './App.css';\n\nimport React, { Component, Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport requireAuth from './components/authComponent';\nconst Home = lazy(() => import('./components/home'));\nconst Header = lazy(() => import('./components/header'))\nconst Footer = lazy(() => import('./components/footer'))\nconst Form = lazy(() => import('./components/form'))\nconst registerForm = lazy(() => import('./components/registerForm'))\nconst Param = lazy(() => import('./components/param'))\nconst Card = lazy(() => import('./components/card'))\nconst Dynamic = lazy(() => import('./components/card_dynamic'))\nconst Formtwo = lazy(() => import('./components/formtwo'))\nconst VariableRenderHtml = lazy(() => import('./components/const_render_html'))\nconst LazyLoad = lazy(() => import('./components/lazy_div'))\nconst Greeting = lazy(() => import('./components/hooks_sample'))\nconst Layout = lazy(() => import('./components/multi_routing/components/Layout'))\n// import Header from './components/header'\n// import Footer from './components/footer'\n// import Form from './components/form'\n// import registerForm from './components/registerForm'\n// import Param from './components/param'\n// import Card from './components/card'\n// import Dynamic from './components/card_dynamic'\n// import Formtwo from './components/formtwo'\n// import VariableRenderHtml from './components/const_render_html'\n// import LazyLoad from './components/lazy_div'\n// import Greeting from './components/hooks_sample'\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Suspense fallback={<div>loading..</div>}>\n          <Header />\n          <Switch>\n            <Route path=\"/home\" component={requireAuth(Home)} exact />\n            <Route path=\"/register-form\" component={requireAuth(registerForm)} exact />\n            <Route path=\"/form\" component={requireAuth(Form)} exact />\n            <Route path=\"/card\" component={requireAuth(Card)} exact />\n            <Route path=\"/dynamic\" component={requireAuth(Dynamic)} exact />\n            <Route path=\"/param/:id/:val\" component={requireAuth(Param)} />\n            <Route path=\"/formtwo\" component={requireAuth(Formtwo)} />\n            <Route path=\"/header\" component={requireAuth(Header)} />\n            <Route path=\"/variable-render-html\" component={requireAuth(VariableRenderHtml)} />\n            <Route path=\"/lazy-div\" component={requireAuth(LazyLoad)} />\n            <Route path=\"/hook\" component={Greeting} />\n            <Route path=\"/nav\" name=\"nav\" render={props => <Layout {...props} />} />\n            {/* {!this.state.auth &&  <Redirect push to=\"/\"/> } */}\n          </Switch>\n          <Footer />\n        </Suspense>\n      </Router>\n    );\n\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n// const element = function gg() {\n//     return(<h1>Hello, world</h1>)\n// }\n// ReactDOM.render(element, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}